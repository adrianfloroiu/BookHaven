@model BooksViewModel
@{
    ViewData["Title"] = "Book Catalog";
    var genres = ViewBag.Genres as IEnumerable<Genre>;
    var selectedGenreId = ViewBag.SelectedGenreId as int?;
    var searchTerm = ViewBag.SearchTerm as string;
}

@section Styles {
    <link rel="stylesheet" href="~/css/catalog.css" asp-append-version="true">
}

<div class="container-fluid p-0">
    <div class="row g-0">
        <!-- Desktop Sidebar -->
        <div class="col-md-3 col-lg-2 d-none d-md-block bg-light sidebar-desktop">
            <div class="pt-4 px-3">
                <h5 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mb-3">
                    <span>Filter by genre</span>
                </h5>
                <ul class="nav flex-column">
                    <li class="nav-item mb-2">
                        <a class="nav-link genre-link @(selectedGenreId == null ? "active" : "")"
                           href="@Url.Action("Index")">
                            All Books
                        </a>
                    </li>
                    @foreach (var genre in genres)
                    {
                        <li class="nav-item mb-2">
                            <a class="nav-link genre-link @(selectedGenreId == genre.Id ? "active" : "")"
                               href="@Url.Action("Index", new { genreId = genre.Id, searchTerm = searchTerm })">
                                @genre.Name
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Genre filter button for mobile -->
        <div class="d-md-none pt-4 text-center">
            <button class="btn btn-primary w-75 mx-auto" type="button" data-bs-toggle="offcanvas" data-bs-target="#genreOffcanvas" aria-controls="genreOffcanvas">
                <i class="bi bi-filter"></i> Genre
            </button>
        </div>

        <!-- Mobile offcanvas sidebar -->
        <div class="offcanvas offcanvas-start" tabindex="-1" id="genreOffcanvas" aria-labelledby="genreOffcanvasLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="genreOffcanvasLabel">Filter by Genre</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="nav flex-column">
                    <li class="nav-item mb-2">
                        <a class="nav-link genre-link @(selectedGenreId == null ? "active" : "")"
                           href="@Url.Action("Index")">
                            All Books
                        </a>
                    </li>
                    @foreach (var genre in genres)
                    {
                        <li class="nav-item mb-2">
                            <a class="nav-link genre-link @(selectedGenreId == genre.Id ? "active" : "")"
                               href="@Url.Action("Index", new { genreId = genre.Id })">
                                @genre.Name
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-12 col-md-9 col-lg-10 ms-sm-auto">
            <div class="pt-4 px-4">
                <div class="row mb-4 align-items-center">
                    <div class="col-md-6">
                        <h1>Book Catalog</h1>
                    </div>
                    <div class="col-md-6 py-3">
                        <form asp-action="Index" method="get" class="d-flex">
                            <input type="hidden" name="genreId" value="@selectedGenreId" />
                            <input type="search" name="searchTerm" class="form-control me-2" placeholder="Search books..." value="@searchTerm" />
                            <button type="submit" class="btn btn-primary">Search</button>
                        </form>
                    </div>
                </div>

                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4 pb-2">
                    @foreach (var book in Model.Books)
                    {
                        <div class="col">
                            <div class="card h-100 book-card" onclick="location.href='@Url.Action("Details", "Catalog", new { id = book.Id })'">
                                <div class="book-image-container">
                                    <img src="@book.ImagePath" class="card-img-top book-cover" alt="@book.Title">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title book-title">@book.Title</h5>
                                    <p class="card-subtitle text-muted mb-2 author-name">@book.Author</p>
                                    <span class="badge genre-badge mt-2">@book.GenreName</span>
                                    <p class="text-muted publication-date mt-2">
                                        <small>Published: @book.PublicationDate.ToString("MMM yyyy")</small>
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @if (!Model.Books.Any())
                {
                    <div class="alert alert-info mt-4 pt-3">
                        No books found.
                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <p>Try a different search term or clear the search.</p>
                        }
                    </div>
                }

                <!-- Pagination -->
                <nav aria-label="Book catalog pagination" class="mt-4">
                    <ul class="pagination justify-content-center">
                        @{
                            var prevDisabled = !Model.PaginatedList.HasPreviousPage ? "disabled" : "";
                            var nextDisabled = !Model.PaginatedList.HasNextPage ? "disabled" : "";
                        }
                        <li class="page-item @prevDisabled">
                            <a asp-action="Index" asp-route-pageIndex="@(Model.PaginatedList.PageIndex - 1)" asp-route-genreId="@selectedGenreId" asp-route-searchTerm="@searchTerm" class="page-link">
                                Previous
                            </a>
                        </li>
                        @for (int i = 1; i <= Model.PaginatedList.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.PaginatedList.PageIndex ? "active" : "")">
                                <a asp-action="Index" asp-route-pageIndex="@i" asp-route-genreId="@selectedGenreId" asp-route-searchTerm="@searchTerm" class="page-link">
                                    @i
                                </a>
                            </li>
                        }
                        <li class="page-item @nextDisabled">
                            <a asp-action="Index" asp-route-pageIndex="@(Model.PaginatedList.PageIndex + 1)" asp-route-genreId="@selectedGenreId" asp-route-searchTerm="@searchTerm" class="page-link">
                                Next
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>
